#!/bin/sh
#
# This monitor was taken from F5 KB article https://support.f5.com/csp/article/K31435017 
# The only change made is to the Curl command by Chris Triner
# The intent is to determine the active node in a Big-IP cluster and mark it as online, with the standby marked down
# This monitor does store basic authentication details in the script. A better method would be to store the basic auth string 
# on the big-ip filesystem and read it in.
#
# (c) Copyright 1996-2007 F5 Networks, Inc.
#
# @(#) $Id: http_monitor_cURL+GET,v 1.0 2007/06/28 16:10:15 deb Exp $
# (based on sample_monitor,v 1.3 2005/02/04 18:47:17 saxon)
#
# these arguments supplied automatically for all external monitors:
# $1 = IP (IPv6 notation. IPv4 addresses are passed in the form 
#                         ::ffff:w.x.y.z
#                         where "w.x.y.z" is the IPv4 address)
# $2 = port (decimal, host byte order)
#
# Additional command line arguments ($3 and higher) may be specified in the monitor template
# This example does not expect any additional command line arguments
#
# Name/Value pairs may also be specified in the monitor template
# This example expects the following Name/Vaule pairs:
#  URI  = the URI to request from the server
#  RECV = the expected response (not case sensitive)
#
# remove IPv6/IPv4 compatibility prefix (LTM passes addresses in IPv6 format)
IP=`echo ${1} | sed 's/::ffff://'`
PORT=${2}

PIDFILE="/var/run/`basename ${0}`.${IP}_${PORT}.pid"
# kill of the last instance of this monitor if hung and log current pid
if [ -f $PIDFILE ]
then
   echo "EAV exceeded runtime needed to kill ${IP}:${PORT}" | logger -p local0.error
   kill -9 `cat $PIDFILE` > /dev/null 2>&1
fi
echo "$$" > $PIDFILE

# send request & check for expected response
curl -fNks https://${IP}:${PORT}/mgmt/tm/cm/device/'?$select=name,failoverState,managementIp' --header 'Authorization: Basic YWRtaW46RW52ZWxvcGUtUHJvd2xpbmctRGVmcmF1ZA==' | jq -r --arg addr "${IP}" '.items[] | select(.managementIp | contains($addr))'| grep -i "active" 2>&1 > /dev/null 


# mark node UP if expected response was received
if [ $? -eq 0 ]
then
    rm -f $PIDFILE
    echo "UP"
else
    rm -f $PIDFILE
fi
exit
# End sample script
